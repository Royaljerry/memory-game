// ****************************************************************
// IMPORT
// ****************************************************************

@import "constants";


// ****************************************************************
// UNITS
// ****************************************************************

@function rem($values, $base-value: $metrics__unit) {
  $max: length($values);

  @if $max == 1 { @return to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}

@function to-rem($value, $base-value: $rem-base) {
  $value: ($value / ($value * 0 + 1)) / ($base-value / ($base-value * 0 + 1)) * 1rem;
  @if ($value == 0rem) { $value: 0; }
  @return $value;
}


// ****************************************************************
// LISTS AND MAPS
// ****************************************************************

@function contains($list, $var) {
  $_out: false;
  @each $item in $list { @if $item == $var { $_out: true; } }
  @return $_out;
}

@function get($map, $key) {
  $_out: '';
  @if map-has_key($map, $key) { $_out: map-get($map, $key); }
  @else { $_out: $key; }
  @return $_out;
}

@function has-not($map, $key) {
  $_out: false;
  @if map_has_key($map, $key) {$_out: false;}
  @else {$_out: true;}
  @return $_out;
}

@function to-string($list, $separator: ',') {
  $result: '';
  @for $index from 1 through length($list) {
    $item: nth($list, $index);
    $result: if(
      $index != length($list),
      #{$result}#{nth($list, $index)}#{$separator},
      #{$result}#{nth($list, $index)}
    );
  }
  @return $result;
}


// ****************************************************************
// CALCULATIONS
// ****************************************************************

@function google-font($family, $weights, $subsets) {
  $url: "https://fonts.googleapis.com/css?family=";
  $sep-1: ":";
  $sep-2: "&display=swap&subset=";
  $address: #{$url}#{$family}#{$sep-1}#{to-string($weights)}#{$sep-2}#{to-string($subsets)};
  @return $address;
}
